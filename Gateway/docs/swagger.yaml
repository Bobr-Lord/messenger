basePath: /
definitions:
  errors.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.CreatePrivateChatRequest:
    properties:
      friend_id:
        type: string
    type: object
  models.CreatePrivateChatResponse:
    properties:
      chat_id:
        type: string
    type: object
  models.CreatePublicChatRequest:
    properties:
      name:
        type: string
      participant_id:
        items:
          type: string
        type: array
    type: object
  models.GetChatUsersResponse:
    properties:
      users:
        items:
          type: string
        type: array
    type: object
  models.GetMeChatsResponse:
    properties:
      chat_id:
        items:
          type: string
        type: array
    type: object
  models.GetUserByIdRequest:
    properties:
      id:
        type: string
    type: object
  models.GetUserByIdResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.GetUserByUsernameRequest:
    properties:
      username:
        type: string
    type: object
  models.GetUserByUsernameResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.UserForGetUsers'
        type: array
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RegisterResponse:
    properties:
      id:
        type: string
    type: object
  models.UpdateMeRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserForGetUsers:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Gateway для мессанджера
  title: Messenger API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: авторизация и генерация jwt
      parameters:
      - description: Данные регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя
      parameters:
      - description: Данные регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /chat:
    get:
      consumes:
      - application/json
      description: получить свои чаты
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetMeChatsResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetMeChats
      tags:
      - chats
  /chat/{chat_id}/users:
    get:
      consumes:
      - application/json
      description: получить пользователей чата
      parameters:
      - description: ID чата
        in: path
        name: chat_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetChatUsersResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetChatUsers
      tags:
      - chats
  /chat/private:
    post:
      consumes:
      - application/json
      description: создать приватный чат
      parameters:
      - description: Данные чата
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreatePrivateChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatePrivateChatResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: CreatePrivateChat
      tags:
      - chats
  /chat/public:
    post:
      consumes:
      - application/json
      description: создать группу
      parameters:
      - description: Данные чата
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreatePublicChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatePrivateChatResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: CreatePublicChat
      tags:
      - chats
  /user/id:
    get:
      consumes:
      - application/json
      description: получить пользователя по id
      parameters:
      - description: id пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.GetUserByIdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserByIdResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetUserByID
      tags:
      - users
  /user/me:
    get:
      consumes:
      - application/json
      description: получить свои данные
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetME
      tags:
      - users
    put:
      consumes:
      - application/json
      description: обновить свои данные
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMeRequest'
      produces:
      - application/json
      responses:
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateMe
      tags:
      - users
  /user/name:
    get:
      consumes:
      - application/json
      description: получить пользователя по username
      parameters:
      - description: username пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.GetUserByUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserByUsernameResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetUserByUsername
      tags:
      - users
  /user/users:
    get:
      consumes:
      - application/json
      description: получить всех пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUsersResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetUsers
      tags:
      - users
  /ws:
    get:
      description: websocket коннект
      responses: {}
      security:
      - BearerAuth: []
      summary: WebSocket
      tags:
      - websocket
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
